{"version":3,"file":"src_app_layout_client_client_module_ts.js","mappings":"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","sources":["./src/app/layout/client/client-routing.module.ts","./src/app/layout/client/client.module.ts","./src/app/layout/client/components/client-roster/client-roster.component.ts","./src/app/layout/client/components/client/client.component.ts","./src/app/layout/client/directives/index.ts","./src/app/layout/client/directives/sortable.directive.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ClientComponent } from './components/client/client.component';\nimport { ClientRosterComponent } from './components/client-roster/client-roster.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ClientComponent\n  },\n  {\n    path: 'roster/:keyword',\n    component: ClientRosterComponent\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ClientRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { AsyncPipe, CommonModule, DecimalPipe, NgFor, NgIf } from '@angular/common';\n\nimport { ClientRoutingModule } from './client-routing.module';\nimport { ClientComponent } from './components/client/client.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgbTypeaheadModule, NgbPaginationModule } from '@ng-bootstrap/ng-bootstrap';\nimport { PageHeaderModule } from '@app/shared';\nimport { ClientService } from './service/client.service';\n\nimport { AttachmentTypeService } from '../attachment-type/service/attachment-type.service';\nimport { BaseRateService } from '../base-rate/service/base-rate.service';\nimport { BillingFrequencyService } from '../billing-frequency/service/billing-frequency.service';\nimport { BillingMethodService } from '../billing-method/service/billing-method.service';\nimport { BillingcurrencyService } from '../billingcurrency/service/billingcurrency.service';\nimport { HourlyBillingService } from '../hourly-billing/service/hourly-billing.service';\nimport { PayorTypeService } from '../payor-type/service/payor-type.service';\n\nimport { NgxMaskModule } from 'ngx-mask';\nimport { StaffService } from '../staff/service/staff.service';\nimport { ClientRosterComponent } from './components/client-roster/client-roster.component';\nimport { NgbdSortableHeader } from './directives';\n\n\n@NgModule({\n  declarations: [\n    ClientComponent,\n    ClientRosterComponent,\n    NgbdSortableHeader\n  ],\n  imports: [\n    CommonModule,\n    ClientRoutingModule,\n    ReactiveFormsModule, \n    PageHeaderModule,\n    NgFor,\n\t\tDecimalPipe,\n\t\tFormsModule,\n\t\tAsyncPipe,\n\t\tNgbTypeaheadModule,\n\t\tNgbPaginationModule,\n\t\tNgIf,\n    NgxMaskModule.forRoot(),\n  ],\n  providers: [\n    ClientService,\n    AttachmentTypeService,\n    BaseRateService,\n    BillingFrequencyService,\n    BillingMethodService,\n    BillingcurrencyService,\n    HourlyBillingService,\n    PayorTypeService,\n    StaffService\n  ]\n})\nexport class ClientModule { }\n","import { ChangeDetectorRef, Component, OnInit, QueryList, ViewChildren } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgbdSortableHeader, SortDirection, SortEvent } from '@app/shared/directives';\nimport { routerTransition } from '@app/router.animations';\nimport { Subject } from 'rxjs';\nimport { ClientService } from '../../service/client.service';\ninterface State {\n  page: number;\n  limit: number;\n  totalPages: number;\n  totalResults: number;\n  searchTerm: string;\n  sortColumn: string;\n  sortDirection: SortDirection;\n}\n@Component({\n  selector: 'app-client-roster',\n  templateUrl: './client-roster.component.html',\n  styleUrls: ['./client-roster.component.scss'],\n  animations: [routerTransition()]\n})\nexport class ClientRosterComponent implements OnInit {\n  clients: any[] = [];\n  sortedColumn!: string;\n  sortedDirection!: string;\n  public searchTerm: string = '';\n  searchTermUpdate = new Subject<string>();\n  isLoading: boolean = false;\n  isClients: boolean = true;\n\n  @ViewChildren(NgbdSortableHeader) headers: QueryList<NgbdSortableHeader>;\n  public _state: State = {\n    page: 1,\n    limit: 20,\n    totalPages: 1,\n    totalResults: 0,\n    searchTerm: '',\n    sortColumn: 'createdAt',\n    sortDirection: 'desc',\n  };\n  keyword: any;\n  constructor(\n    public router: Router,\n    public clientService: ClientService,\n    private cdr: ChangeDetectorRef,\n    public route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      if (params.keyword !== '' && params.keyword != null) {\n        this.keyword = params.keyword;\n        this.getAllClients(this._state);\n      }\n    });\n  }\n\n  onSort({ column, direction }: SortEvent) {\n    this.sortedColumn = column;\n    this.sortedDirection = direction;\n    this._state.sortColumn = column;\n    this._state.sortDirection = direction;\n    this.getAllClients(this._state);\n  }\n\n  getAllClients(state: State) {\n    this.clientService.getClientRoster(state, this.keyword).subscribe(\n      response => {\n        this.clients = response.results;\n        if (this.clients.length == 0) {\n          this.isClients = false;\n        } else {\n          this.isClients = true;\n        }\n        this.setState(response);\n        this.isLoading = false;\n      }, (error) => {\n        this.isLoading = false;\n      }\n    );\n  }\n\n  setState(response: any) {\n    this._state.page = response.page;\n    this._state.limit = response.limit;\n    this._state.totalPages = response.totalPages;\n    this._state.totalResults = response.totalResults;\n  }\n\n}\n","import { ChangeDetectorRef, Component, OnInit, QueryList, ViewChildren } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NgbdSortableHeader, SortDirection, SortEvent } from '@app/shared/directives';\nimport { routerTransition } from '@app/router.animations';\nimport { downloadFile } from '@app/shared/modules/download-file/download-file';\nimport { ConfirmationDialogService } from '@app/shared/services/confirmation-dialog/confirmation-dialog.service';\nimport { debounceTime, distinctUntilChanged, Subject } from 'rxjs';\nimport { ClientService } from '../../service/client.service';\ninterface State {\n  page: number;\n  limit: number;\n  totalPages: number;\n  totalResults: number;\n  searchTerm: string;\n  sortColumn: string;\n  sortDirection: SortDirection;\n}\n@Component({\n  selector: 'app-client',\n  templateUrl: './client.component.html',\n  styleUrls: ['./client.component.scss'],\n  animations: [routerTransition()]\n})\nexport class ClientComponent implements OnInit {\n  clients: any[] = [];\n  sortedColumn!: string;\n  sortedDirection!: string;\n  public searchTerm: string = '';\n  searchTermUpdate = new Subject<string>();\n  isLoading: boolean = false;\n  isClients: boolean = true;\n\n  @ViewChildren(NgbdSortableHeader) headers: QueryList<NgbdSortableHeader>;\n  public _state: State = {\n    page: 1,\n    limit: 20,\n    totalPages: 1,\n    totalResults: 0,\n    searchTerm: '',\n    sortColumn: 'createdAt',\n    sortDirection: 'desc',\n  };\n  constructor(\n    public router: Router,\n    public clientService: ClientService,\n    private cdr: ChangeDetectorRef,\n    private confirmationDialogService: ConfirmationDialogService\n  ) {\n    this.searchTermUpdate\n      .pipe(debounceTime(200), distinctUntilChanged())\n      .subscribe(value => {\n        this._state.searchTerm = value;\n        this.getAllClients(this._state);\n      });\n  }\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.getAllClients(this._state);\n  }\n\n  onSort({ column, direction }: SortEvent) {\n    this.sortedColumn = column;\n    this.sortedDirection = direction;\n    this._state.sortColumn = column;\n    this._state.sortDirection = direction;\n    this.getAllClients(this._state);\n  }\n\n  getAllClients(state: State) {\n    this.clientService.getClients(state).subscribe(\n      response => {\n        this.clients = response.results;\n        if (this.clients.length == 0) {\n          this.isClients = false;\n        } else {\n          this.isClients = true;\n        }\n        this.setState(response);\n        this.isLoading = false;\n      }, (error) => {\n        this.isLoading = false;\n      }\n    );\n  }\n  downloadFileExcel() {\n    return this.clientService.getClientForExcelDownload(this._state).subscribe(\n      response => {\n        downloadFile(response, \"client\")\n      }, (error) => {\n      }\n    );\n  }\n  refreshClients() {\n    this.getAllClients(this._state);\n  }\n\n  setState(response: any) {\n    this._state.page = response.page;\n    this._state.limit = response.limit;\n    this._state.totalPages = response.totalPages;\n    this._state.totalResults = response.totalResults;\n  }\n\n  editClient(clientId: string) {\n    this.router.navigate(['/clients/edit-client/' + clientId]);\n  }\n\n  updateStatus(clientId: string, status: boolean) {\n    let data = {\n      isActive: !status\n    }\n    this.clientService.updateClient(clientId, data).subscribe(response => {\n      if (response) {\n        // this.toastr.success(response.name + ' Updated!', 'Success');\n        this.refreshClients();\n      }\n    });\n  }\n\n  updateFavorite(clientId: string, status: boolean) {\n    let data = {\n      isFavorite: !status\n    }\n    this.clientService.updateClient(clientId, data).subscribe(response => {\n      if (response) {\n        // this.toastr.success(response.name + ' Updated!', 'Success');\n        this.refreshClients();\n      }\n    });\n  }\n\n  deleteClient(clientId: string) {\n    this.confirmationDialogService.confirm('Please confirm..', 'Do you really want to delete this client ?')\n      .then((confirmed) => {\n        if (confirmed) {\n          this.clientService.deleteClient(clientId).subscribe(response => {\n            this.getAllClients(this._state);\n          });\n        }\n      })\n  }\n}\n","import { NgbdSortableHeader } from './sortable.directive';\n\nexport const directives = [NgbdSortableHeader];\n\nexport * from './sortable.directive';\n","import { Directive, EventEmitter, HostBinding, HostListener, Input, OnChanges, Output } from '@angular/core';\nexport type SortColumn = 'createdAt' | '';\nexport type SortDirection = 'asc' | 'desc' | '';\nconst rotate: { [key: string]: SortDirection } = { asc: 'desc', desc: 'asc', '': 'asc' };\n\nexport interface SortEvent {\n    column: string;\n    direction: SortDirection;\n}\n\n@Directive({\n    selector: 'th[sortable]',\n    exportAs: 'NgbdSortableHeader',\n    host: {\n        '[class.asc]': 'direction === \"asc\"',\n        '[class.desc]': 'direction === \"desc\"',\n        '(click)': 'rotate()'\n    }\n})\nexport class NgbdSortableHeader implements OnChanges {\n    @Input() sortable!: string;\n    @Input() oldColumn!: string;\n    @Input() direction: SortDirection = '';\n    @Output() sort = new EventEmitter<SortEvent>();\n    ngOnChanges(changes: any) {\n        if (this.sortable !== changes?.oldColumn?.currentValue && changes?.oldColumn?.currentValue !== changes?.oldColumn?.previousValue) {\n            this.direction = ''\n        }\n    }\n    rotate() {\n        this.direction = rotate[this.direction];\n        this.sort.emit({ column: this.sortable, direction: this.direction });\n    }\n}\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}